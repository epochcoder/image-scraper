package com.github.epochcoder.imagedownloader;

import com.github.epochcoder.imagedownloader.core.DownloadInformation;
import com.github.epochcoder.imagedownloader.core.ImageDownloader;
import com.github.epochcoder.imagedownloader.util.StringUtil;

import org.jdesktop.application.Action;
import org.jdesktop.application.FrameView;
import org.jdesktop.application.ResourceMap;
import org.jdesktop.application.SingleFrameApplication;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.net.URL;
import java.util.List;
import java.util.Set;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

import javax.swing.*;

/**
 * The application's main frame.
 */
public class ImageDownloaderView extends FrameView {
    private final ExecutorService executor = Executors.newSingleThreadExecutor();
    private File directory;
    private boolean padded;

    public ImageDownloaderView(SingleFrameApplication app) {
        super(app);

        initComponents();

        ResourceMap resourceMap = getResourceMap();
        int messageTimeout = resourceMap.getInteger("StatusBar.messageTimeout");
        messageTimer = new Timer(messageTimeout, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                statusMessageLabel.setText("");
            }
        });
        messageTimer.setRepeats(false);

        int busyAnimationRate = resourceMap.getInteger("StatusBar.busyAnimationRate");
        for (int i = 0; i < busyIcons.length; i++) {
            busyIcons[i] = resourceMap.getIcon("StatusBar.busyIcons[" + i + "]");
        }

        busyIconTimer = new Timer(busyAnimationRate, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                busyIconIndex = (busyIconIndex + 1) % busyIcons.length;
                statusAnimationLabel.setIcon(busyIcons[busyIconIndex]);
            }
        });

        idleIcon = resourceMap.getIcon("StatusBar.idleIcon");
        statusAnimationLabel.setIcon(idleIcon);
        progressBar.setVisible(false);
    }

    @Action
    public void showAboutBox() {
        if (aboutBox == null) {
            JFrame mainFrame = ImageDownloaderApp.getApplication().getMainFrame();
            aboutBox = new ImageDownloaderAboutBox(mainFrame);
            aboutBox.setLocationRelativeTo(mainFrame);
        }
        ImageDownloaderApp.getApplication().show(aboutBox);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        lblUrl = new javax.swing.JLabel();
        lblSearchStart = new javax.swing.JLabel();
        lblSearchEnd = new javax.swing.JLabel();
        lblRangeStart = new javax.swing.JLabel();
        lblDirectory = new javax.swing.JLabel();
        butStart = new javax.swing.JButton();
        spiRangeStart = new javax.swing.JSpinner();
        txtUrlTemplate = new javax.swing.JTextField();
        txtCss = new javax.swing.JTextField();
        txtUrl = new javax.swing.JTextField();
        butSelect = new javax.swing.JButton();
        txtDirectory = new javax.swing.JTextField();
        final javax.swing.JCheckBox chkPadded = new javax.swing.JCheckBox();
        menuBar = new javax.swing.JMenuBar();
        javax.swing.JMenu fileMenu = new javax.swing.JMenu();
        javax.swing.JMenuItem exitMenuItem = new javax.swing.JMenuItem();
        javax.swing.JMenu helpMenu = new javax.swing.JMenu();
        javax.swing.JMenuItem aboutMenuItem = new javax.swing.JMenuItem();
        statusPanel = new javax.swing.JPanel();
        javax.swing.JSeparator statusPanelSeparator = new javax.swing.JSeparator();
        statusMessageLabel = new javax.swing.JLabel();
        statusAnimationLabel = new javax.swing.JLabel();
        progressBar = new javax.swing.JProgressBar();
        fileChooser = new javax.swing.JFileChooser();

        mainPanel.setName("mainPanel"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(com.github.epochcoder.imagedownloader.ImageDownloaderApp.class).getContext().getResourceMap(ImageDownloaderView.class);
        lblUrl.setText(resourceMap.getString("lblUrl.text")); // NOI18N
        lblUrl.setName("lblUrl"); // NOI18N

        lblSearchStart.setText(resourceMap.getString("lblCssSelectorStart.text")); // NOI18N
        lblSearchStart.setName("lblCssSelectorStart"); // NOI18N

        lblSearchEnd.setText(resourceMap.getString("lblURLPatternEnd.text")); // NOI18N
        lblSearchEnd.setName("lblURLPatternEnd"); // NOI18N

        lblRangeStart.setText(resourceMap.getString("lblRangeStart.text")); // NOI18N
        lblRangeStart.setName("lblRangeStart"); // NOI18N

        lblDirectory.setText(resourceMap.getString("lblDirectory.text")); // NOI18N
        lblDirectory.setName("lblDirectory"); // NOI18N

        butStart.setText(resourceMap.getString("butStart.text")); // NOI18N
        butStart.setName("butStart"); // NOI18N
        butStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butStartActionPerformed(evt);
            }
        });

        spiRangeStart.setName("spiRangeStart"); // NOI18N

        txtUrlTemplate.setText(resourceMap.getString("txtUrlTemplate.text")); // NOI18N
        txtUrlTemplate.setName("txtUrlTemplate"); // NOI18N

        txtCss.setText(resourceMap.getString("txtCssSelector.text")); // NOI18N
        txtCss.setName("txtCssSelector"); // NOI18N

        txtUrl.setText(resourceMap.getString("txtUrl.text")); // NOI18N
        txtUrl.setName("txtUrl"); // NOI18N

        butSelect.setText(resourceMap.getString("butSelect.text")); // NOI18N
        butSelect.setName("butSelect"); // NOI18N
        butSelect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butSelectActionPerformed(evt);
            }
        });

        txtDirectory.setText(resourceMap.getString("txtDirectory.text")); // NOI18N
        txtDirectory.setEnabled(false);
        txtDirectory.setName("txtDirectory"); // NOI18N

        chkPadded.setText(resourceMap.getString("chkPadded.text")); // NOI18N
        chkPadded.setName("chkPadded"); // NOI18N
        chkPadded.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                chkPaddedItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(chkPadded)
                    .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(butStart, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, mainPanelLayout.createSequentialGroup()
                            .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(lblRangeStart)
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(lblSearchEnd)
                                            .addComponent(lblSearchStart, javax.swing.GroupLayout.Alignment.LEADING)))
                                    .addComponent(lblDirectory, javax.swing.GroupLayout.Alignment.TRAILING))
                                .addComponent(lblUrl))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(txtUrl, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 485, Short.MAX_VALUE)
                                .addComponent(txtCss, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(txtUrlTemplate, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 485, Short.MAX_VALUE)
                                .addComponent(spiRangeStart, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 485, Short.MAX_VALUE)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, mainPanelLayout.createSequentialGroup()
                                    .addComponent(txtDirectory, javax.swing.GroupLayout.DEFAULT_SIZE, 420, Short.MAX_VALUE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(butSelect))))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtUrl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblUrl))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtCss, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblSearchStart))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtUrlTemplate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblSearchEnd))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(spiRangeStart, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addGap(80, 80, 80)
                        .addComponent(lblRangeStart)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtDirectory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblDirectory)
                    .addComponent(butSelect))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(butStart)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(chkPadded)
                .addContainerGap())
        );

        menuBar.setName("menuBar"); // NOI18N

        fileMenu.setText(resourceMap.getString("fileMenu.text")); // NOI18N
        fileMenu.setName("fileMenu"); // NOI18N

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(com.github.epochcoder.imagedownloader.ImageDownloaderApp.class).getContext().getActionMap(ImageDownloaderView.class, this);
        exitMenuItem.setAction(actionMap.get("quit")); // NOI18N
        exitMenuItem.setName("exitMenuItem"); // NOI18N
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        helpMenu.setText(resourceMap.getString("helpMenu.text")); // NOI18N
        helpMenu.setName("helpMenu"); // NOI18N

        aboutMenuItem.setAction(actionMap.get("showAboutBox")); // NOI18N
        aboutMenuItem.setName("aboutMenuItem"); // NOI18N
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        statusPanel.setName("statusPanel"); // NOI18N

        statusPanelSeparator.setName("statusPanelSeparator"); // NOI18N

        statusMessageLabel.setName("statusMessageLabel"); // NOI18N

        statusAnimationLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        statusAnimationLabel.setName("statusAnimationLabel"); // NOI18N

        progressBar.setName("progressBar"); // NOI18N

        javax.swing.GroupLayout statusPanelLayout = new javax.swing.GroupLayout(statusPanel);
        statusPanel.setLayout(statusPanelLayout);
        statusPanelLayout.setHorizontalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(statusPanelSeparator, javax.swing.GroupLayout.DEFAULT_SIZE, 575, Short.MAX_VALUE)
            .addGroup(statusPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(statusMessageLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 405, Short.MAX_VALUE)
                .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(statusAnimationLabel)
                .addContainerGap())
        );
        statusPanelLayout.setVerticalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(statusPanelLayout.createSequentialGroup()
                .addComponent(statusPanelSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(statusMessageLabel)
                    .addComponent(statusAnimationLabel)
                    .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(3, 3, 3))
        );

        fileChooser.setCurrentDirectory(new java.io.File("C:\\"));
            fileChooser.setDialogTitle(resourceMap.getString("fileChooser.dialogTitle")); // NOI18N
            fileChooser.setFileFilter(new MyCustomFilter());
            fileChooser.setFileSelectionMode(javax.swing.JFileChooser.DIRECTORIES_ONLY);
            fileChooser.setName("fileChooser"); // NOI18N

            setComponent(mainPanel);
            setMenuBar(menuBar);
            setStatusBar(statusPanel);
        }// </editor-fold>//GEN-END:initComponents

    private void butSelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butSelectActionPerformed
        int returnVal = fileChooser.showOpenDialog(this.getFrame());
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            this.directory = fileChooser.getSelectedFile();
            this.txtDirectory.setText(this.directory.getAbsolutePath());
        }
    }//GEN-LAST:event_butSelectActionPerformed

    private void butStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butStartActionPerformed
        if (!StringUtil.isNull(this.txtUrl.getText())
                && !StringUtil.isNull(this.txtCss.getText())
                && StringUtil.isNumber(String.valueOf(spiRangeStart.getValue()))
                && this.directory != null) {
            final String path = this.directory.getAbsolutePath();
            final String url = this.txtUrl.getText();
            final String urlTemplate = this.txtUrlTemplate.getText();
            final String cssSelector = this.txtCss.getText();
            final int rangeStart = Integer.parseInt(String.valueOf(this.spiRangeStart.getValue()));
           // final boolean paddedDigits = this.

            {
                //init
                statusMessageLabel.setText("Initializing...");
                messageTimer.restart();

                if (!busyIconTimer.isRunning()) {
                    statusAnimationLabel.setIcon(busyIcons[0]);
                    busyIconIndex = 0;
                    busyIconTimer.start();
                }

                progressBar.setVisible(true);
                progressBar.setIndeterminate(true);
                butStart.setEnabled(false);
            }

            try {
                executor.submit(new Runnable() {
                    @Override
                    public void run() {
                        final ImageDownloader downloader = new ImageDownloader(url,
                                urlTemplate, cssSelector, rangeStart, 15);
                        downloader.setPaddedDigits(padded);

                        // search for images
                        final List<URL> urls = downloader.searchForImages(new DownloadInformation() {
                            @Override
                            public void onStart(String uniqueId, int total) {
                                statusMessageLabel.setText("Retrieving links...");
                                messageTimer.restart();
                                progressBar.setVisible(true);
                                progressBar.setIndeterminate(true);
                            }

                            @Override
                            public void onException(String uniqueId, Throwable exception) {}

                            @Override
                            public void onStatusChange(String uniqueId, int current, int total, String currUrl) {
                                statusMessageLabel.setText("Retrieved link [" + current + "] " + currUrl);
                                messageTimer.restart();
                            }

                            @Override
                            public void onComplete(String uniqueId) {
                                statusMessageLabel.setText("Retrieved all links");
                                messageTimer.restart();
                            }
                        });

                        // download them
                        final Set<Future<?>> tasks = downloader.downloadResources(urls, path, new DownloadInformation() {
                            @Override
                            public void onStart(String uniqueId, int total) {
                                statusMessageLabel.setText("[" + uniqueId + "] Downloading " + total + " items");
                                messageTimer.restart();

                                progressBar.setVisible(true);
                                progressBar.setIndeterminate(true);

                                progressBar.setMinimum(0);
                                progressBar.setMaximum(total);
                            }

                            @Override
                            public void onException(String uniqueId, Throwable exception) {
                                System.err.println(uniqueId + " threw an exception["
                                        + exception.getMessage() + "]");
                                exception.printStackTrace();
                            }

                            @Override
                            public void onStatusChange(String uniqueId, int current, int total, String currUrl) {
                                statusMessageLabel.setText("[" + uniqueId + "] Downloading file " + current + " of " + total);
                                messageTimer.restart();

                                progressBar.setVisible(true);
                                progressBar.setIndeterminate(false);
                                progressBar.setValue(current);
                            }

                            @Override
                            public void onComplete(String uniqueId) {
                                // only the thread completed here...
                            }
                        });

                        // wait for all tasks
                        for (Future<?> task : tasks) {
                            try {
                                task.get();
                            } catch (InterruptedException | ExecutionException e) { }
                        }

                        // set completed status
                        statusMessageLabel.setText("Completed all downloads!");
                        messageTimer.restart();
                        busyIconTimer.stop();
                        statusAnimationLabel.setIcon(idleIcon);
                        progressBar.setVisible(false);
                        progressBar.setValue(0);
                        butStart.setEnabled(true);
                    }
                });
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this.getFrame(), "Exception : " + e.getMessage(),
                        "Error!", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this.getFrame(), "Please enter all options!",
                    "Error!", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_butStartActionPerformed

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        executor.shutdownNow(); System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void chkPaddedItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_chkPaddedItemStateChanged
        this.padded = evt.getStateChange() == 1;
    }//GEN-LAST:event_chkPaddedItemStateChanged

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton butSelect;
    private javax.swing.JButton butStart;
    private javax.swing.JFileChooser fileChooser;
    private javax.swing.JLabel lblDirectory;
    private javax.swing.JLabel lblRangeStart;
    private javax.swing.JLabel lblSearchEnd;
    private javax.swing.JLabel lblSearchStart;
    private javax.swing.JLabel lblUrl;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JSpinner spiRangeStart;
    private javax.swing.JLabel statusAnimationLabel;
    private javax.swing.JLabel statusMessageLabel;
    private javax.swing.JPanel statusPanel;
    private javax.swing.JTextField txtCss;
    private javax.swing.JTextField txtDirectory;
    private javax.swing.JTextField txtUrl;
    private javax.swing.JTextField txtUrlTemplate;
    // End of variables declaration//GEN-END:variables

    private final Timer messageTimer;
    private final Timer busyIconTimer;
    private final Icon idleIcon;
    private final Icon[] busyIcons = new Icon[15];
    private int busyIconIndex = 0;

    private JDialog aboutBox;
}

class MyCustomFilter extends javax.swing.filechooser.FileFilter {
    @Override
    public boolean accept(File file) {
        // Allow only directories,
        return file.isDirectory();
    }
    @Override
    public String getDescription() {
        // This description will be displayed in the dialog,
        // hard-coded = ugly, should be done via I18N
        return "Directories";
    }
}